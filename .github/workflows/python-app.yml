# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 fastapi uvicorn
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  test: 
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov fastapi uvicorn
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Start API server
      run: |
        python api/main.py &  
        sleep 5  
    - name: Test with pytest
      run: |
        coverage run -m pytest
    - name: Run code coverage
      if: always()
      run: |
        # Run coverage report
        coverage xml

        # Report and write to summary.
        coverage report --format=markdown >> $GITHUB_STEP_SUMMARY

        # Report again and fail if the total average is under 80%.
        coverage report --fail-under=80
    - name: Store coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.xml
      if: ${{ failure() }}

  Deployment:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name : create image if needed and start containers in Docker
        # env:
        #     API_KEY_ADMIN: ${{ secrets.API_KEY_ADMIN }}
            # USE os.getenv("API_KEY_ADMIN") in the auth provider
        run: |
          docker-compose up --build


